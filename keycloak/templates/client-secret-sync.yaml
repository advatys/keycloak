{{- range $realm := .Values.realms }}
{{- range $client := $realm.clients }}  
{{- if $client.syncSecret }}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: {{ $.Release.Namespace }}
  name: "{{ $.Release.Name }}-sync-secret"
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - selfsubjectrulesreviews
  verbs:
  - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $.Release.Name }}-sync-secret
  namespace: {{ $.Release.Namespace }} 
subjects:
- kind: ServiceAccount
  name: {{ $.Release.Name }}-sync-secret
  namespace: {{ $client.syncSecret.namespace }}
roleRef:
  kind: Role
  name: {{ $.Release.Name }}-sync-secret
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ $.Release.Name }}-sync-secret"
  namespace: {{ $client.syncSecret.namespace }}
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: {{ $.Release.Name }}-store
  namespace: {{ $client.syncSecret.namespace }}
spec:
  provider:
    kubernetes:
      remoteNamespace: {{ $.Release.Namespace }}
      auth:
        serviceAccount:
          name: "{{ $.Release.Name }}-sync-secret"
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $.Release.Name }}-client-secret-{{ $client.name }}
  namespace: {{ $client.syncSecret.namespace }}
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: {{ $.Release.Name }}-store
  target:
    name: keycloak-client-secret-{{ $client.name }}
  data:
  - secretKey: clientSecret
    remoteRef:
      key: keycloak-client-secret-{{ $client.name }}
      property: CLIENT_SECRET
{{- end }} 
{{- end }}
{{- end }}